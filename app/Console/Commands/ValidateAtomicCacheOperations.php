<?php

namespace App\Console\Commands;

use App\Models\ShopDataVersion;
use App\Events\ProductUpdated;
use App\Events\CategoryUpdated;
use App\Domain\Catalog\Models\Product;
use App\Domain\Catalog\Models\Category;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Carbon;

class ValidateAtomicCacheOperations extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'cache:validate-atomic 
                            {--test-concurrency : Test concurrent operations}
                            {--repair : Repair version inconsistencies}
                            {--clear-cache : Clear all version caches}
                            {--stress-test=10 : Number of concurrent operations for stress test}';

    /**
     * The console command description.
     */
    protected $description = 'Valide et teste les op√©rations de cache atomiques pour √©viter les race conditions';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ Validation des op√©rations de cache atomiques');
        $this->newLine();

        // Nettoyage du cache si demand√©
        if ($this->option('clear-cache')) {
            $this->clearCaches();
        }

        // R√©paration des versions si demand√©e
        if ($this->option('repair')) {
            $this->repairVersions();
        }

        // Tests de base
        $this->runBasicTests();

        // Tests de concurrence si demand√©s
        if ($this->option('test-concurrency')) {
            $this->runConcurrencyTests((int) $this->option('stress-test'));
        }

        // Validation finale
        $this->validateFinalState();

        $this->info('‚úÖ Validation termin√©e avec succ√®s');
    }

    /**
     * Nettoie tous les caches
     */
    private function clearCaches(): void
    {
        $this->info('üßπ Nettoyage des caches...');
        
        try {
            ShopDataVersion::clearVersionCache();
            $this->line('  ‚Ä¢ Cache des versions nettoy√©');
            
            Cache::flush();
            $this->line('  ‚Ä¢ Cache g√©n√©ral nettoy√©');
            
            $this->info('‚úÖ Nettoyage termin√©');
        } catch (\Exception $e) {
            $this->error('‚ùå Erreur lors du nettoyage: ' . $e->getMessage());
        }
        
        $this->newLine();
    }

    /**
     * R√©pare les incoh√©rences de versions
     */
    private function repairVersions(): void
    {
        $this->info('üîß R√©paration des versions...');
        
        try {
            $issues = ShopDataVersion::validateAndRepairVersions();
            
            if (empty($issues)) {
                $this->line('  ‚Ä¢ Aucun probl√®me d√©tect√©');
            } else {
                foreach ($issues as $issue) {
                    $this->line("  ‚Ä¢ {$issue}");
                }
            }
            
            $this->info('‚úÖ R√©paration termin√©e');
        } catch (\Exception $e) {
            $this->error('‚ùå Erreur lors de la r√©paration: ' . $e->getMessage());
        }
        
        $this->newLine();
    }

    /**
     * Ex√©cute les tests de base
     */
    private function runBasicTests(): void
    {
        $this->info('üß™ Tests de base des op√©rations atomiques...');
        
        // Test 1: Mise √† jour atomique simple
        $this->testAtomicUpdate();
        
        // Test 2: Coh√©rence des timestamps
        $this->testTimestampConsistency();
        
        // Test 3: Invalidation de cache atomique
        $this->testAtomicCacheInvalidation();
        
        $this->info('‚úÖ Tests de base termin√©s');
        $this->newLine();
    }

    /**
     * Test de mise √† jour atomique
     */
    private function testAtomicUpdate(): void
    {
        $this->line('  ‚Ä¢ Test mise √† jour atomique...');
        
        $startTime = microtime(true);
        
        try {
            // Simuler plusieurs mises √† jour simultan√©es
            $dataTypes = ['products', 'categories', 'global'];
            ShopDataVersion::updateVersionsAtomic($dataTypes);
            
            // V√©rifier que toutes les versions ont le m√™me timestamp (√† la microseconde pr√®s)
            $versions = ShopDataVersion::whereIn('data_type', $dataTypes)
                ->orderBy('last_updated_at')
                ->get();
            
            if ($versions->count() === count($dataTypes)) {
                $firstTimestamp = $versions->first()->last_updated_at;
                $allSameTimestamp = $versions->every(function ($version) use ($firstTimestamp) {
                    return $version->last_updated_at->equalTo($firstTimestamp);
                });
                
                if ($allSameTimestamp) {
                    $duration = round((microtime(true) - $startTime) * 1000, 2);
                    $this->line("    ‚úÖ Succ√®s ({$duration}ms)");
                } else {
                    $this->line('    ‚ùå Timestamps incoh√©rents');
                }
            } else {
                $this->line('    ‚ùå Nombre de versions incorrect');
            }
            
        } catch (\Exception $e) {
            $this->line('    ‚ùå Erreur: ' . $e->getMessage());
        }
    }

    /**
     * Test de coh√©rence des timestamps
     */
    private function testTimestampConsistency(): void
    {
        $this->line('  ‚Ä¢ Test coh√©rence des timestamps...');
        
        try {
            // Effectuer plusieurs mises √† jour rapides
            for ($i = 0; $i < 5; $i++) {
                ShopDataVersion::updateVersionsAtomic(['test_type_' . $i]);
                usleep(1000); // 1ms entre chaque op√©ration
            }
            
            // V√©rifier qu'il n'y a pas de doublons de timestamps
            $duplicates = ShopDataVersion::select('last_updated_at', DB::raw('COUNT(*) as count'))
                ->where('data_type', 'like', 'test_type_%')
                ->groupBy('last_updated_at')
                ->having('count', '>', 1)
                ->count();
            
            if ($duplicates === 0) {
                $this->line('    ‚úÖ Aucun doublon de timestamp');
            } else {
                $this->line("    ‚ùå {$duplicates} doublons d√©tect√©s");
            }
            
            // Nettoyer les donn√©es de test
            ShopDataVersion::where('data_type', 'like', 'test_type_%')->delete();
            
        } catch (\Exception $e) {
            $this->line('    ‚ùå Erreur: ' . $e->getMessage());
        }
    }

    /**
     * Test d'invalidation de cache atomique
     */
    private function testAtomicCacheInvalidation(): void
    {
        $this->line('  ‚Ä¢ Test invalidation cache atomique...');
        
        try {
            // Cr√©er des entr√©es de cache de test
            $testKeys = ['test_key_1', 'test_key_2', 'test_key_3'];
            foreach ($testKeys as $key) {
                Cache::put($key, 'test_value', 300);
            }
            
            // V√©rifier qu'elles existent
            $allExist = collect($testKeys)->every(fn($key) => Cache::has($key));
            
            if ($allExist) {
                // Utiliser la m√©thode d'invalidation atomique via reflection
                $reflection = new \ReflectionClass(ShopDataVersion::class);
                $method = $reflection->getMethod('invalidateCacheKeysAtomic');
                $method->setAccessible(true);
                $method->invoke(null, $testKeys);
                
                // V√©rifier qu'elles ont √©t√© supprim√©es
                $allRemoved = collect($testKeys)->every(fn($key) => !Cache::has($key));
                
                if ($allRemoved) {
                    $this->line('    ‚úÖ Invalidation atomique r√©ussie');
                } else {
                    $this->line('    ‚ùå Certaines cl√©s n\'ont pas √©t√© supprim√©es');
                }
            } else {
                $this->line('    ‚ùå √âchec cr√©ation des cl√©s de test');
            }
            
        } catch (\Exception $e) {
            $this->line('    ‚ùå Erreur: ' . $e->getMessage());
        }
    }

    /**
     * Ex√©cute les tests de concurrence
     */
    private function runConcurrencyTests(int $numOperations): void
    {
        $this->info("üèÅ Tests de concurrence ({$numOperations} op√©rations simultan√©es)...");
        
        // Test avec des processus multiples simul√©s
        $this->testConcurrentVersionUpdates($numOperations);
        
        // Test avec des √©v√©nements simul√©s
        $this->testConcurrentEventHandling($numOperations);
        
        $this->info('‚úÖ Tests de concurrence termin√©s');
        $this->newLine();
    }

    /**
     * Test de mises √† jour de versions concurrentes
     */
    private function testConcurrentVersionUpdates(int $numOperations): void
    {
        $this->line('  ‚Ä¢ Test mises √† jour concurrentes...');
        
        try {
            $startTime = microtime(true);
            
            // Simuler des op√©rations concurrentes avec des promesses
            $promises = [];
            for ($i = 0; $i < $numOperations; $i++) {
                $promises[] = function () use ($i) {
                    ShopDataVersion::updateVersionsAtomic(['concurrent_test', 'global']);
                };
            }
            
            // Ex√©cuter toutes les op√©rations
            foreach ($promises as $promise) {
                $promise();
            }
            
            $duration = round((microtime(true) - $startTime) * 1000, 2);
            
            // V√©rifier la coh√©rence
            $versions = ShopDataVersion::whereIn('data_type', ['concurrent_test', 'global'])
                ->get();
            
            $this->line("    ‚úÖ {$numOperations} op√©rations termin√©es en {$duration}ms");
            $this->line("    ‚Ä¢ Versions cr√©√©es: " . $versions->count());
            
        } catch (\Exception $e) {
            $this->line('    ‚ùå Erreur: ' . $e->getMessage());
        }
    }

    /**
     * Test de gestion d'√©v√©nements concurrents
     */
    private function testConcurrentEventHandling(int $numOperations): void
    {
        $this->line('  ‚Ä¢ Test gestion √©v√©nements concurrents...');
        
        try {
            // Cr√©er des produits et cat√©gories de test si n√©cessaire
            $product = Product::first();
            $category = Category::first();
            
            if (!$product || !$category) {
                $this->line('    ‚ö†Ô∏è  Aucun produit/cat√©gorie trouv√© pour les tests');
                return;
            }
            
            $startTime = microtime(true);
            
            // Simuler des √©v√©nements concurrents
            for ($i = 0; $i < $numOperations; $i++) {
                if ($i % 2 === 0) {
                    event(new ProductUpdated($product, 'updated'));
                } else {
                    event(new CategoryUpdated($category, 'updated'));
                }
            }
            
            $duration = round((microtime(true) - $startTime) * 1000, 2);
            $this->line("    ‚úÖ {$numOperations} √©v√©nements trait√©s en {$duration}ms");
            
        } catch (\Exception $e) {
            $this->line('    ‚ùå Erreur: ' . $e->getMessage());
        }
    }

    /**
     * Validation de l'√©tat final
     */
    private function validateFinalState(): void
    {
        $this->info('üîç Validation de l\'√©tat final...');
        
        try {
            // Statistiques des versions
            $stats = ShopDataVersion::getVersionStats();
            $this->line('  ‚Ä¢ Nombre de types de versions: ' . count($stats));
            
            // V√©rifier la coh√©rence globale
            $globalVersion = ShopDataVersion::getGlobalVersion();
            $this->line('  ‚Ä¢ Version globale: ' . substr($globalVersion, 0, 12) . '...');
            
            // V√©rifier l'√©tat du cache
            $cacheWorking = Cache::put('test_final', 'ok', 10) && Cache::get('test_final') === 'ok';
            Cache::forget('test_final');
            
            if ($cacheWorking) {
                $this->line('  ‚Ä¢ Cache: ‚úÖ Fonctionnel');
            } else {
                $this->line('  ‚Ä¢ Cache: ‚ùå Probl√®me d√©tect√©');
            }
            
            // V√©rifier les verrous
            $lockTest = Cache::lock('test_lock', 1)->get(function () {
                return true;
            });
            
            if ($lockTest) {
                $this->line('  ‚Ä¢ Verrous: ‚úÖ Fonctionnels');
            } else {
                $this->line('  ‚Ä¢ Verrous: ‚ùå Probl√®me d√©tect√©');
            }
            
            $this->info('‚úÖ √âtat final valid√©');
            
        } catch (\Exception $e) {
            $this->error('‚ùå Erreur lors de la validation finale: ' . $e->getMessage());
        }
        
        $this->newLine();
    }
} 